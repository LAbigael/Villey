---
import search from "../images/search.svg";
---

<button
  id="search-button"
  class="input font-light rounded-sm bg-background-light items-center w-64 h-10 flex flex-row relative"
  onclick="my_modal_2.showModal()"
>
  <span
    class="bg-inherit w-6/8 h-full rounded-sm font-light text-sm flex flex-row items-center justify-start pl-2"
    >Rechercher...</span
  >
  <img
    src={search.src}
    class="absolute right-0 opacity-50 mx-2"
    width="25"
    height="auto"
  />
</button>
<dialog id="my_modal_2" class="modal">
  <div class="modal-box">
    <form
      class="input font-light rounded-sm bg-background-light items-center w-full h-10 flex flex-row relative"
      autocomplete="off"
      onsubmit="event.preventDefault();"
    >
      <img src={search.src} class="opacity-50 mx-1" width="25" height="auto" />
      <input
        type="text"
        id="search"
        class="bg-inherit w-full h-full rounded-sm font-light text-sm flex flex-row items-center justify-start lg:pl-2"
        placeholder="Rechercher un article ou un volume..."
      />
    </form>

    <div class="text-sm text-gray-500" id="searchReadout"></div>
    <ul id="search-results"></ul>
    <div id="info"></div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<style is:global>
  .modal-backdrop button {
    @apply border-none hover:bg-opacity-0 focus:outline-none focus:ring-0;
  }
  #search-button {
    @apply border-none hover:bg-background-light text-color;
  }
  .modal-box {
    @apply !bg-background-light dark:bg-background-dark rounded-sm p-4 w-1/2 max-w-none flex flex-col items-center;
  }
  #search-results {
    @apply h-96 overflow-y-scroll w-full my-4;
  }
  #search-results li a {
    @apply flex py-4 flex-row justify-between items-center w-full hover:bg-background-dark dark:hover:bg-background-light hover:text-background-light dark:hover:text-background-dark rounded-sm mr-2;
  }
  #search-results li a span {
    @apply grow;
  }
   .type-icon {
     @apply font-bold text-xs rounded-full text-background-dark dark:text-background-light px-2 py-1 group-hover:text-background-light group-hover:dark:text-background-dark;
  }
  #search-results li a svg {
    min-width: 20px;
    @apply text-background-light dark:text-background-dark;
  }
  #info {
    @apply w-full flex justify-end text-xs text-gray-500 items-center;
  }
</style>

<script>
  // imports
  import Fuse from "fuse.js";

  let SEARCH_DATA;
  let FUSE_INSTANCE;
  const FUSE_OPTIONS = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.5,
    keys: [
      {
        name: "title",
        weight: 1,
      },
    ],
  };

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
				#spinner {
					animation: spin 1s linear infinite;
				}
				@keyframes spin {
					100% {
						transform: rotate(360deg);
					}
				}
				</style></svg>`;
  const BACKSPACE_ICON = `<svg class="DocSearch-Hit-Select-Icon" width="20" height="20" viewBox="0 0 20 20"><g stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"><path d="M18 3v4c0 2-2 4-4 4H2"></path><path d="M8 17l-6-6 6-6"></path></g></svg>`;
  const TYPE_ICON = (type) => {
    return `<span class="type-icon">${
      type === "volume" ? "V" : type === "article" ? "A" : ""
    }</span>`;
  };

  // selectors
  const search = document.querySelector("#search");
  const resultsList = document.querySelector("#search-results");
  const info = document.querySelector("#info");

  // functions

  function generateSearchList(results) {
    return results
      .map((r) => {
        const { title, slug, type } = r.item;
        return `<li class="group">
          <a href="/${type}s/${slug}/"><span>${TYPE_ICON(
            type,
          )}${title}</span>${BACKSPACE_ICON}</a>
							</li>`;
      })
      .join("");
  }
  function generateNoResults() {
    return `<div class="flex flex-col items-center my-4">
              <svg width="40" height="40" viewBox="0 0 20 20" fill="none" fill-rule="evenodd" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M15.5 4.8c2 3 1.7 7-1 9.7h0l4.3 4.3-4.3-4.3a7.8 7.8 0 01-9.8 1m-2.2-2.2A7.8 7.8 0 0113.2 2.4M2 18L18 2"></path></svg>
              <span class="my-2">Aucun résultat trouvé</span>
            </div>`;
  }

  async function fetchSearchResults(search: string) {
    // if (search.length === 0) return;
    resultsList.innerHTML = SPINNER;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search.json");
        if (!res.ok) {
          throw new Error("Une erreur est survenue");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (e) {
        console.error(e);
      }
    }
    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
    }
    if (!FUSE_INSTANCE) return;
    const searchResult = FUSE_INSTANCE.search(search);

    if (searchResult.length > 0) {
      resultsList.innerHTML = generateSearchList(searchResult);
      info.innerHTML =
        TYPE_ICON("article") + "Article, " + TYPE_ICON("volume")+ "Volume";
    } else {
      if (search.length > 0) {
        resultsList.innerHTML = generateNoResults();

        info.innerHTML = "";
      } else {
        resultsList.innerHTML = "";
        info.innerHTML = "";
      }
    }
  }

  search.addEventListener("input", (e) => {
    fetchSearchResults(e.target.value);
  });
</script>
