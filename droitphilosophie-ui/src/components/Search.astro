---
import search from "../images/search.svg";
---

<button
  id="search-button"
  class="input font-light rounded-sm bg-background-light items-center w-64 h-10 flex flex-row relative"
  onclick="my_modal_2.showModal()"
>
  <span
    class="bg-inherit w-6/8 h-full rounded-sm font-light text-sm flex flex-row items-center justify-start pl-2"
    >Rechercher...</span
  >
  <img
    src={search.src}
    class="absolute right-0 opacity-50 mx-2"
    width="25"
    height="auto"
  />
</button>
<dialog id="my_modal_2" class="modal">
  <div class="modal-box">
    <div
      class="input font-light rounded-sm bg-background-light items-center w-full h-10 flex flex-row relative"
    >
      <img
        src={search.src}
        class="opacity-50 mx-1"
        width="25"
        height="auto"
      />
      <input
        type="text"
        id="search"
        class="bg-inherit w-full h-full rounded-sm font-light text-sm flex flex-row items-center justify-start pl-2"
        placeholder="Rechercher..."
      />
    </div>

    <div class="text-sm text-gray-500" id="searchReadout"></div>
    <ul id="search-results"></ul>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<style>
  .modal-backdrop button {
    @apply border-none hover:bg-opacity-0 focus:outline-none focus:ring-0;
  }
  #search-button {
    @apply border-none hover:bg-background-light text-color;
  }
  .modal-box {
    @apply bg-background-light dark:bg-background-dark rounded-sm p-4 w-1/2 max-w-none flex flex-col items-center;
  }
  #search-results {
    @apply h-96 overflow-y-scroll w-full;
  }
</style>

<script>
  // imports
  import Fuse from "fuse.js";

  const my_modal_2 = document.getElementById("my_modal_2");
  my_modal_2.showModal();
  let SEARCH_DATA;
  let FUSE_INSTANCE;
  const FUSE_OPTIONS = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.5,
    keys: [
      {
        name: "title",
        weight: 1,
      },
    ],
  };

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
				#spinner {
					animation: spin 1s linear infinite;
				}
				@keyframes spin {
					100% {
						transform: rotate(360deg);
					}
				}
				</style></svg>`;

  // selectors
  const search = document.querySelector("#search");
  const resultsList = document.querySelector("#search-results");

  // functions

  function generateSearchList(results) {
    return results
      .map((r) => {
        const { title, slug } = r.item;
        return `<li>
								<a href="/blog/${slug}/">${title}</a>
							</li>`;
      })
      .join("");
  }
  function generateNoResults() {
    return `<div class="flex flex-col items-center my-4">
              <svg width="40" height="40" viewBox="0 0 20 20" fill="none" fill-rule="evenodd" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M15.5 4.8c2 3 1.7 7-1 9.7h0l4.3 4.3-4.3-4.3a7.8 7.8 0 01-9.8 1m-2.2-2.2A7.8 7.8 0 0113.2 2.4M2 18L18 2"></path></svg>
              <span class="my-2">Aucun résultat trouvé</span>
            </div>`;
  }

  async function fetchSearchResults(search: string) {
    if (search.length === 0) return;
    resultsList.innerHTML = SPINNER;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search.json");
        if (!res.ok) {
          throw new Error("Something went wrong…please try again");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (e) {
        console.error(e);
      }
    }
    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
    }
    if (!FUSE_INSTANCE) return;
    const searchResult = FUSE_INSTANCE.search(search);
    resultsList.innerHTML =
      searchResult.length > 0
        ? generateSearchList(searchResult)
        : generateNoResults();
  }

  search.addEventListener("input", (e) => {
    fetchSearchResults(e.target.value);
  });
</script>
