---
import SearchIcon from "../images/search.astro";
---

<button
  id="search-button"
  class="input font-light rounded-sm w-64 h-10"
  onclick="my_modal_2.showModal()"
>
  <div class="flex flex-row relative items-center w-full opacity-60">
    <SearchIcon />
    <span
      class="bg-inherit w-6/8 h-full rounded-sm font-light text-sm flex flex-row items-center justify-start pl-2"
      >Rechercher...</span
    >
    <svg
      class="absolute right-0 mx-2 w-5 stroke-inherit fill-current"
      viewBox="0 0 24 24"
      ><path
        d="M17 2H7a5 5 0 0 0-5 5v10a5 5 0 0 0 5 5h10a5 5 0 0 0 5-5V7a5 5 0 0 0-5-5Zm3 15a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v10Z"
      ></path><path
        d="M15.293 6.707a1 1 0 1 1 1.414 1.414l-8.485 8.486a1 1 0 0 1-1.414-1.415l8.485-8.485Z"
      ></path></svg
    >
  </div>
</button>
<dialog id="my_modal_2" class="modal">
  <div class="modal-box">
    <form
      class="input font-light rounded-sm bg-opacity-0 items-center w-full h-12 flex flex-row relative text-color dark:text-color-light opacity-60 focus-within:opacity-100"
      autocomplete="off"
      onsubmit="event.preventDefault();"
    >
      <SearchIcon />
      <input
        type="text"
        id="search"
        class="bg-inherit w-full h-full rounded-sm font-light text-sm flex flex-row items-center justify-start lg:pl-2"
        placeholder="Rechercher un article ou un volume..."
      />
    </form>

    <div class="text-sm text-gray-500" id="searchReadout"></div>
    <ul id="search-results"></ul>
    <div id="info">
      <div id="no-result" class="flex flex-col items-center my-4 hidden">
        <svg
          width="40"
          height="40"
          viewBox="0 0 20 20"
          fill="none"
          fill-rule="evenodd"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          ><path
            d="M15.5 4.8c2 3 1.7 7-1 9.7h0l4.3 4.3-4.3-4.3a7.8 7.8 0 01-9.8 1m-2.2-2.2A7.8 7.8 0 0113.2 2.4M2 18L18 2"
          ></path></svg
        >
        <span class="my-2">Aucun résultat trouvé</span>
      </div>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<style is:global>
  form.modal-backdrop button {
    @apply border-none hover:bg-opacity-0 hover:bg-black focus:outline-none focus:ring-0;
  }
  #search-button {
    @apply border border-opacity-10 hover:border-color  hover:dark:border-color-light  text-color bg-background-light dark:bg-background-dark dark:text-color-light focus:outline-none focus:ring-0 px-2;
  }
  dialog .modal-box {
    @apply h-128 bg-background-light dark:bg-background-dark rounded-sm p-4 w-11/12  lg:w-1/2 max-w-none flex flex-col items-center;
  }
  #search-results {
    @apply overflow-y-scroll w-full my-4;
  }
  #search-results li a {
    @apply flex py-4 flex-row justify-between items-center w-full hover:bg-background-dark dark:hover:bg-background-light hover:text-background-light dark:hover:text-background-dark rounded-sm mr-2;
  }
  .type-icon {
    @apply font-bold text-xs rounded-full text-background-dark dark:text-background-light px-2 py-1 group-hover:text-background-light group-hover:dark:text-background-dark;
  }
  #search-results li a svg {
    min-width: 20px;
    @apply text-background-light dark:text-background-dark;
  }
  #info {
    @apply w-full flex justify-center text-xs text-gray-500 items-center;
  }
  .section-title {
    @apply text-xs opacity-70;
  }
  .section-title .num {
    @apply bg-transparent mr-2 group-hover:text-background-light group-hover:dark:text-background-dark;
  }
  .authors-list {
    @apply flex flex-wrap text-xs opacity-70 leading-5 text-accent-dark dark:text-accent-light group-hover:text-background-light group-hover:dark:text-background-dark;
  }
  .authors-list::before {
    content: "Auteurs :";
    @apply mr-2;
  }
  .themes-list {
    @apply flex flex-wrap text-xs opacity-70 leading-5 text-accent-dark dark:text-accent-light group-hover:text-background-light group-hover:dark:text-background-dark;
  }
  .themes-list::before {
    @apply mr-2;
    content: "Thèmes :";
  }
  .highlighted {
    @apply text-secondary-dark dark:text-secondary-light font-semibold;
  }
</style>

<script>
  // imports
  import Fuse from "fuse.js";

  let SEARCH_DATA;
  let FUSE_INSTANCE;
  const FUSE_OPTIONS = {
    includeMatches: true,
    includeScore: true,
    shouldSort: true,
    threshold: 0.2,
    keys: [
      {
        name: "title",
        weight: 1,
      },
      { name: "section", weight: 0.6 },
      { name: "volume", weight: 0.7 },
      { name: "themes", weight: 0.5 },
      { name: "authors", weight: 0.5 },
    ],
  };

  // selectors
  const search = document.querySelector("#search");
  const resultsList = document.querySelector("#search-results");
  const info = document.querySelector("#info");

  async function fetchSearchResults(search: string) {
    // if (search.length === 0) return;
    resultsList.innerHTML = SPINNER;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search.json");
        if (!res.ok) {
          throw new Error("Une erreur est survenue");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (e) {
        console.error(e);
      }
    }
    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
    }
    if (!FUSE_INSTANCE) return;
    const searchResult = FUSE_INSTANCE.search(search, { limit: 10 });

    if (searchResult.length > 0) {
      resultsList.innerHTML = generateSearchList(searchResult);
        info.querySelector("#no-result").classList.add("hidden");
    } else {
      resultsList.innerHTML = "";
      if (search.length > 0) {
        info.querySelector("#no-result").classList.remove("hidden");
      } else {
        info.querySelector("#no-result").classList.add("hidden");
      }
    }
  }
  const debounce = (fn, delay) => {
    let timeoutID;
    return function (...args) {
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
      timeoutID = setTimeout(() => {
        fn(...args);
      }, delay);
    };
  };

  search.addEventListener(
    "input",
    debounce((e) => {
      fetchSearchResults(e.target.value);
    }, 300),
  );
  document.addEventListener("DOMContentLoaded", () => {
    fetchSearchResults("");
  });

  function preserveSpaces(str) {
    return str.replace(' ', '\u00A0')
  }

  function generateHighlightedString(matches) {
    const sortedMatches = matches.sort(
      (a, b) => a.indices[0][0] - b.indices[0][0],
    );

    return sortedMatches
      .map(({ indices, value }) => {
        let content = "";
        let nextUnhighlightedRegionStartingIndex = 0;

        indices.forEach((region) => {
          const lastRegionNextIndex = region[1] + 1;

          content += [
            preserveSpaces(value.substring(nextUnhighlightedRegionStartingIndex, region[0])),
            `<span class="highlighted">`,
            preserveSpaces( value.substring(region[0], lastRegionNextIndex) ),
            "</span>",
          ].join("");

          nextUnhighlightedRegionStartingIndex = lastRegionNextIndex;
        });

        content += preserveSpaces(value.substring(nextUnhighlightedRegionStartingIndex));

        return content;
      })
      .join(", ");
  }
  function highlightMatchesFromStringOrJustReturnTheString(matches, key, str) {
    const themeMatches = matches.filter((m) => m.key === key);
    if (themeMatches.length > 0) {
      return generateHighlightedString(themeMatches);
    }
    return str;
  }

  function generateListIfInMatches(matches, key) {
    const themeMatches = matches.filter((m) => m.key === key);
    if (themeMatches.length > 0) {
      return `<span class="opacity-50"></span> ${generateHighlightedString(
        themeMatches,
      )}`;
    }
    return "";
  }
  // functions
  function generateSearchList(results) {
    return results
      .map((r) => {
        const { title, slug, type, volume, volumeNb } = r.item;
        const themeMatches = generateListIfInMatches(r.matches, "themes");
        const authorMatches = generateListIfInMatches(r.matches, "authors");

        let hideThemes,
          hideAuthors = "";

        if (themeMatches === "") hideThemes = "hidden";

        if (authorMatches === "") hideAuthors = "hidden";

        return `
          <li class="group">
            <a href="/${type}s/${slug}/">
              <div class="flex flex-col ">
                 <div class="">${highlightMatchesFromStringOrJustReturnTheString(
                   r.matches,
                   "title",
                   title,
                 )}</div>
          ${volumeTitle(volume, volumeNb, r.matches)}
          <div class="flex flex-row themes-list ${hideThemes}">
                  ${themeMatches}
                </div>
          <div class="flex flex-row authors-list ${hideAuthors}">
                    ${authorMatches}
                </div>
             </div>
             ${BACKSPACE_ICON}
            </a>
					</li>`;
      })
      .join("");
  }

  const volumeTitle = (volume = "", volumeNb, matches) => {
    return `<span class="section-title mt-2"><span class="num ">${volumeNb}</span>${highlightMatchesFromStringOrJustReturnTheString(
      matches,
      "volume",
      volume,
    )}</span>`;
  };

  const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#000000" viewBox="0 0 256 256" id="spinner"><path d="M236,128a108,108,0,0,1-216,0c0-42.52,24.73-81.34,63-98.9A12,12,0,1,1,93,50.91C63.24,64.57,44,94.83,44,128a84,84,0,0,0,168,0c0-33.17-19.24-63.43-49-77.09A12,12,0,1,1,173,29.1C211.27,46.66,236,85.48,236,128Z"></path><style>
				#spinner {
					animation: spin 1s linear infinite;
				}
				@keyframes spin {
					100% {
						transform: rotate(360deg);
					}
				}
				</style></svg>`;
  const BACKSPACE_ICON = `<svg class="DocSearch-Hit-Select-Icon" width="20" height="20" viewBox="0 0 20 20"><g stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"><path d="M18 3v4c0 2-2 4-4 4H2"></path><path d="M8 17l-6-6 6-6"></path></g></svg>`;
</script>
